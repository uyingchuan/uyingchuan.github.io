<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小u</title>
  
  <subtitle>u影川的小屋</subtitle>
  <link href="https://uyc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://uyc.gitee.io/"/>
  <updated>2020-09-13T12:54:00.689Z</updated>
  <id>https://uyc.gitee.io/</id>
  
  <author>
    <name>u影川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue路由懒加载</title>
    <link href="https://uyc.gitee.io/2020/09/13/tech-notes/vue/vue-lazy-load/"/>
    <id>https://uyc.gitee.io/2020/09/13/tech-notes/vue/vue-lazy-load/</id>
    <published>2020-09-13T06:59:00.000Z</published>
    <updated>2020-09-13T12:54:00.689Z</updated>
    
    <content type="html"><![CDATA[<p>懒加载也叫延迟加载，即在需要使用指定代码块的时候才进行代码块的加载。<br>详见 <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">官方文档</a></p><a id="more"></a><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>在打包构建应用时，JavaScript包会非常大，影响页面的加载。如果将不同的路由对应的组件分割成不同的代码块，在路由被访问的时候才进行对应代码块的加载，会大大提高首页的加载效率。</p><p>使用vue的异步组件结合webpack代码分割功能实现的懒加载可以轻松的实现路由懒加载</p><p>将异步组件定义成返回一个Promise的工厂函数（该函数返回的Promise应该resolve组件本身），然后使用webpack（&gt;webpack2）的动态import语法定义代码分块点，结合这两点就可以定义一个能被webpack自动代码分割的异步组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h4><p>如果需要把某个路由下的所有组件打包在同一个异步块（chunk）中，需要使用webpack（&gt;webpack2.4）的特殊注释语法来提供chunk name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-bar&quot; */</span> <span class="string">&#x27;./Bar.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Baz = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-baz&quot; */</span> <span class="string">&#x27;./Baz.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒加载也叫延迟加载，即在需要使用指定代码块的时候才进行代码块的加载。&lt;br&gt;详见 &lt;a href=&quot;https://router.vuejs.org/zh/guide/advanced/lazy-loading.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="vue, webpack" scheme="https://uyc.gitee.io/tags/vue-webpack/"/>
    
  </entry>
  
  <entry>
    <title>继承与原型链</title>
    <link href="https://uyc.gitee.io/2020/09/06/tech-notes/JavaScript/js-prototype/"/>
    <id>https://uyc.gitee.io/2020/09/06/tech-notes/JavaScript/js-prototype/</id>
    <published>2020-09-06T12:06:00.000Z</published>
    <updated>2020-09-06T14:23:12.807Z</updated>
    
    <content type="html"><![CDATA[<p>原型链在js中是比较重要的一个知识点，js本身就是基于原型的，非常有必要理解js的原型链与继承相关知识。</p><a id="more"></a><h3 id="基于原型链的继承"><a href="#基于原型链的继承" class="headerlink" title="基于原型链的继承"></a>基于原型链的继承</h3><p>js对象都会有一个指向一个原型对象的链，在试图访问对象的属性时，不仅仅会在对象本身上寻找，还会在该对象的原型链上继续往上寻找，一直找到匹配的属性或者到达原型链的末端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.fi = <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.se = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.prototype.se = <span class="number">2.1</span></span><br><span class="line">a.prototype.th = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> a()</span><br><span class="line"><span class="comment">// b通过a构造生成，b的原型链便指向了构造函数a的原型对象</span></span><br><span class="line"><span class="comment">// 即 b.__proto__ === a.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.se)   <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.th)   <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"><span class="comment">// 在b中找寻不到便到b的原型链中寻找，即a.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.un)  <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"><span class="comment">// 在b中找寻不到便到b的原型链中寻找，即a.prototype</span></span><br><span class="line"><span class="comment">// 在a.prototype中寻找不到便继续往原型链上找</span></span><br><span class="line"><span class="comment">// 而a.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">// 在Object.prototype中还找不到，继续</span></span><br><span class="line"><span class="comment">// 而Object.prototype.__proto__ === null</span></span><br><span class="line"><span class="comment">// 到这便是原型链的末尾，于是整个原型链如下：</span></span><br><span class="line"><span class="comment">// &#123; fi:1, se: 2 &#125; --&gt; &#123; se: 2.1, th: 3 &#125; --&gt; Object.prototype --&gt; null</span></span><br></pre></td></tr></table></figure><p>js便是这样通过原型链来实现继承的，如果在实例对象<code>obj</code>中找不到属性，便在obj.<strong>proto__中寻找，找不到继续在obj.__proto</strong>.__proto__里寻找，一直到原型链末端<code>null</code>便没有下一个__proto__了，没找到就返回<code>undefined</code></p><p>__proto__不是js标准里的，不用这个属性的好。在ECMAScript标准中是obj.[[Prototype]]，从ES6开始使用Object.getPrototypeOf()和Object.setPrototypeOf()来访问修改[[Prototype]]。</p><p>在遍历对象属性的时候如果不想遍历原型链，可以使用Object实例对象的<code>hasOwnProperty</code>方法，或者<code>Object.keys()</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原型链在js中是比较重要的一个知识点，js本身就是基于原型的，非常有必要理解js的原型链与继承相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖与节流</title>
    <link href="https://uyc.gitee.io/2020/09/04/tech-notes/JavaScript/js-debounce/"/>
    <id>https://uyc.gitee.io/2020/09/04/tech-notes/JavaScript/js-debounce/</id>
    <published>2020-09-04T13:21:00.000Z</published>
    <updated>2020-09-04T15:57:44.023Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍了简单的函数防抖与节流代码</p><a id="more"></a><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p>在搜索框识别、用户名密码验证等场景下，可以使用函数防抖来减少计算，节省性能，使用户有更好的体验</p><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">handle, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            handle()</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>类似淘宝购物场景多次点击，或者通过页面视口变化改变根节点字体大小等场景，可以将多个访问缩减为一个访问，这时用节流函数可以提升用户体验</p><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">handle, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">if</span>(now - last &gt; wait) &#123;</span><br><span class="line">            handle.apply();</span><br><span class="line">            last = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里介绍了简单的函数防抖与节流代码&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包及对象私有属性</title>
    <link href="https://uyc.gitee.io/2020/08/28/tech-notes/JavaScript/js-closure/"/>
    <id>https://uyc.gitee.io/2020/08/28/tech-notes/JavaScript/js-closure/</id>
    <published>2020-08-28T08:59:00.000Z</published>
    <updated>2020-08-31T03:22:09.837Z</updated>
    
    <content type="html"><![CDATA[<p>关于闭包及对象私有变量相关的问题中我的理解</p><a id="more"></a><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包是一种保护私有变量的机制，如果在函数中声明局部变量，该变量会随着函数的完成而销毁，闭包可以使函数内部的变量不被销毁<br>ES6之前js是没有块级作用域的，只有全局和函数作用域，闭包可以解决因没有块级作用域而出现的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里只说明他的保护私有变量的能力</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">add()   <span class="comment">// count = 1</span></span><br><span class="line">add()   <span class="comment">// count = 2</span></span><br><span class="line">add()   <span class="comment">// count = 3</span></span><br></pre></td></tr></table></figure><p>在上面代码中<code>add</code>是一个返回一个匿名函数的立即执行函数，它返回的函数中包含有立即执行函数的私有变量<code>count</code>，这样就形成了一个闭包，<code>count</code>变量并不会因为函数的执行而销毁，反而一直存在内存中.<br>闭包能保护私有变量，但私有变量多了也会吃内存，日常代码中闭包还是很常见的，理解了就行。</p><h4 id="对象私有属性"><a href="#对象私有属性" class="headerlink" title="对象私有属性"></a>对象私有属性</h4><p>创建对象的私有属性是有必要的，可以使用闭包的形式生成私有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Private</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _weight = <span class="string">&#x27;private&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> _name=name</span><br><span class="line">    <span class="keyword">let</span> _age=age</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        getName: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Name: &#x27;</span> + _name)</span><br><span class="line">        &#125;,</span><br><span class="line">        getAge: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Age: &#x27;</span> + _age)</span><br><span class="line">        &#125;,</span><br><span class="line">        setAge: <span class="function">(<span class="params">nAge</span>) =&gt;</span> &#123;</span><br><span class="line">            _age = nAge</span><br><span class="line">        &#125;,</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.getName()</span><br><span class="line">            <span class="built_in">this</span>.getAge()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> private = <span class="keyword">new</span> Private(<span class="string">&#x27;Tony&#x27;</span>,<span class="number">30</span>)</span><br><span class="line">private.getAge()</span><br><span class="line"><span class="comment">// Age: 30</span></span><br><span class="line">private.setAge(<span class="number">18</span>)</span><br><span class="line">private.getAge()</span><br><span class="line"><span class="comment">// Age: 18</span></span><br><span class="line"><span class="built_in">console</span>.log(private._weight)    </span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">private.init()</span><br><span class="line"><span class="comment">// Name: Tony</span></span><br><span class="line"><span class="comment">// Age: 18</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，想要读写<code>Private</code>中的变量只能通过放出开的接口才可以，这样便形成了对象的私有属性<br><code>init</code>接口的<code>this</code>指向的便是执行时调用接口的实例对象<code>private</code>，该对象在此处只有构造函数放出来的公开接口，对象的私有属性便被实现出来了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于闭包及对象私有变量相关的问题中我的理解&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器项目知识点(1)</title>
    <link href="https://uyc.gitee.io/2020/08/21/tech-notes/cloudmusic/cloudmusic-note1/"/>
    <id>https://uyc.gitee.io/2020/08/21/tech-notes/cloudmusic/cloudmusic-note1/</id>
    <published>2020-08-21T08:55:00.000Z</published>
    <updated>2020-08-22T12:22:12.991Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/uyc/vue-cloudmusic">音乐播放器项目</a>知识点（1）</p><a id="more"></a><ul><li><a href="#first">0.vue-lazyload图片懒加载</a></li><li><a href="#second">1.网页的全屏</a></li></ul><h2 id="first" style="display:block"></h2><h2 id="1-使用v-lazyload插件实现图片懒加载"><a href="#1-使用v-lazyload插件实现图片懒加载" class="headerlink" title="1.使用v-lazyload插件实现图片懒加载"></a>1.使用v-lazyload插件实现图片懒加载</h2><p>图片懒加载在项目开发里比较常用，使用<code>vue-lazyload</code>先在生产环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-lazyload</span><br></pre></td></tr></table></figure><p>使用很简单，在img标签中添加v-lazy属性写上图片地址即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="second" style="display:block"></h2><h2 id="2-实现网页全屏与退出"><a href="#2-实现网页全屏与退出" class="headerlink" title="2.实现网页全屏与退出"></a>2.实现网页全屏与退出</h2><p><code>document</code>自带<code>requestFullscreen</code>方法可以全屏模式，退出使用自带的<code>exitFullscreen</code>方法，判断是否全屏模式有<code>fullScreen</code>方法，为了兼容可以使用以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestFullscreen</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.requestFullscreen) &#123;</span><br><span class="line">        ele.requestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.msRequestFullscreen) &#123;</span><br><span class="line">        ele.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.mozRequestFullScreen) &#123;</span><br><span class="line">        ele.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.webkitRequestFullScreen) &#123;</span><br><span class="line">        ele.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pDoc = <span class="built_in">window</span>.parent.document</span><br><span class="line">    <span class="keyword">if</span> (pDoc.exitFullscreen) &#123;</span><br><span class="line">        pDoc.exitFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.msExitFullscreen) &#123;</span><br><span class="line">        pDoc.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.mozCancelFullScreen) &#123;</span><br><span class="line">        pDoc.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.webkitCancelFullScreen) &#123;</span><br><span class="line">        pDoc.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否全屏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFullScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.fullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.mozFullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.webkitIsFullScreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gitee.com/uyc/vue-cloudmusic&quot;&gt;音乐播放器项目&lt;/a&gt;知识点（1）&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://uyc.gitee.io/tags/Vue/"/>
    
    <category term="vue-lazyload" scheme="https://uyc.gitee.io/tags/vue-lazyload/"/>
    
  </entry>
  
  <entry>
    <title>来自风平浪静的明天</title>
    <link href="https://uyc.gitee.io/2020/08/20/essay/from-a-calm-tomorrow/"/>
    <id>https://uyc.gitee.io/2020/08/20/essay/from-a-calm-tomorrow/</id>
    <published>2020-08-20T07:43:00.000Z</published>
    <updated>2020-08-27T14:46:22.715Z</updated>
    
    <content type="html"><![CDATA[<p>昨天一天把来自风平浪静的明天这部番刷完了，刷完之后就一直难受，莫名的难受。</p><a id="more"></a><p>以前看完一部番也会有一些触动，他们的故事到这就完结了，就挺怀念的。</p><p>但昨天的难受不一样。</p><p>看到他们的happy-end，有遗憾，有解脱，有幸福，为他们开心。</p><p>他们的情感纠葛很真实，很单纯，很容易从他们故事里看到自己的经历。</p><img src="../../../../../images/from-a-calm-tomorrow/千咲.jpg" style="width:100%;"><p>最心疼里面的千咲了，因为罪恶感一直将自己的感情束缚着，还好有个高智商的纺喜欢上了她，能够把她拉回来。</p><p>还有喜欢着她的要，为了不让她一直难受着，一直在努力的推动着光和爱花的感情，即使这会使得千咲讨厌他。审视自己，又有几分像呢？</p><p>虽然结局美海很遗憾，不过看起来她似乎已经解脱了，将自己对光的爱转为对光和爱华的祝福。结局淳还喜欢着她，他们应该会在一起吧，希望她能幸福。</p><img src="../../../../../images/from-a-calm-tomorrow/from-tomorrow.jpeg" style="width:100%;"><p>他们的故事就这样结束了，挺多感悟的，我的生活还在继续，我还有很多人要相遇，还有很多事要经历，祝福自己。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天一天把来自风平浪静的明天这部番刷完了，刷完之后就一直难受，莫名的难受。&lt;/p&gt;</summary>
    
    
    
    <category term="essay" scheme="https://uyc.gitee.io/categories/essay/"/>
    
    
    <category term="anime" scheme="https://uyc.gitee.io/tags/anime/"/>
    
    <category term="life" scheme="https://uyc.gitee.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器项目知识点(0)</title>
    <link href="https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note0/"/>
    <id>https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note0/</id>
    <published>2020-08-10T11:30:00.000Z</published>
    <updated>2020-08-22T12:22:10.210Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我会把开发<a href="https://gitee.com/uyc/vue-cloudmusic">音乐播放器项目</a>中遇到的知识点记下来，方便自己学习，同时是对自己的记录。</p><a id="more"></a><ul><li><a href="#first">0.Vue批量注册组件</a></li><li><a href="#second">1.移动端适配方案Rem</a></li><li><a href="#third">2.Vue按需导入Element-UI组件</a></li></ul><h2 id="first" style="display:block"></h2><h2 id="1-Vue批量注册组件"><a href="#1-Vue批量注册组件" class="headerlink" title="1.Vue批量注册组件"></a>1.Vue批量注册组件</h2><p>学习一个新项目时遇到的一个知识点，复用率高的基础组件可以批量进行注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">install(Vue) &#123;</span><br><span class="line">    <span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">        <span class="string">&quot;@/components/base&quot;</span>, <span class="comment">// 引入组件的根目录</span></span><br><span class="line">        <span class="literal">true</span>, <span class="comment">//是否需要查找下级目录</span></span><br><span class="line">        /[a-z0<span class="number">-9</span>]+\.(jsx?|vue)$/i</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 批量注册基础组件</span></span><br><span class="line">    requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当前获取组件的配置数据</span></span><br><span class="line">        <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line">        <span class="comment">// 获取该组件的 default.name 属性</span></span><br><span class="line">        <span class="keyword">const</span> componentName = componentConfig.default.name</span><br><span class="line">        <span class="keyword">if</span> (componentName) &#123;</span><br><span class="line">            <span class="comment">// 注册组件</span></span><br><span class="line">            Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="second" style="display:block"></h2><h2 id="2-移动端适配方案Rem"><a href="#2-移动端适配方案Rem" class="headerlink" title="2.移动端适配方案Rem"></a>2.移动端适配方案Rem</h2><p>使用<code>rem</code>进行移动端适配是现在主流的适配方案，需要将设计师的<code>px</code>稿件转换成<code>rem</code>，然后用<code>js</code>实现根字体随屏幕尺寸变换，从而达到移动端适配的效果。我这次项目学习了使用<code>postcss-pxtorem</code>插件进行<code>rem</code>自动计算。</p><h3 id="postcss-pxtorem插件的使用"><a href="#postcss-pxtorem插件的使用" class="headerlink" title="postcss-pxtorem插件的使用"></a>postcss-pxtorem插件的使用</h3><p>先在开发环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-pxtorem</span><br></pre></td></tr></table></figure><p>接着在<code>package.json</code>文件中配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;postcss&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;autoprefixer&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;rootValue&quot;</span>: <span class="number">14</span>,    <span class="comment">//设计稿根字体尺寸</span></span><br><span class="line">        <span class="string">&quot;propList&quot;</span>: [       <span class="comment">//需要转换的元素列表</span></span><br><span class="line">          <span class="string">&quot;*&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在已经可以将<code>px</code>转换成<code>rem</code>了，接下来要根据设备屏幕尺寸变换根字体尺寸，需要在vue程序入口加载一个<code>rem.js</code>文件,我这里还使用了<code>lodash-es</code>插件实现<code>函数节流(throttle)</code>,先安装插件再使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash-es</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rem.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">14</span></span><br><span class="line"><span class="keyword">let</span> htmlFontSize</span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> calc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里限制根字体在14~18之间，太小太大不好看</span></span><br><span class="line">        <span class="keyword">const</span> maxFontSize = <span class="number">18</span></span><br><span class="line">        <span class="keyword">const</span> minFontSize = <span class="number">14</span></span><br><span class="line">        <span class="keyword">const</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> width = html.clientWidth</span><br><span class="line">        <span class="comment">// 1440为设计搞尺寸，这里计算变换后的根字体尺寸</span></span><br><span class="line">        <span class="keyword">let</span> size = baseSize * (width / <span class="number">1440</span>)</span><br><span class="line">        size = <span class="built_in">Math</span>.min(maxFontSize, size)</span><br><span class="line">        size = <span class="built_in">Math</span>.max(minFontSize, size)</span><br><span class="line">        html.style.fontSize = size + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    calc()</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, throttle(calc(), <span class="number">500</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="third" style="display:block"></h2><h2 id="3-Vue按需导入Element-UI组件"><a href="#3-Vue按需导入Element-UI组件" class="headerlink" title="3.Vue按需导入Element-UI组件"></a>3.Vue按需导入Element-UI组件</h2><p>使用<code>babel-plugin-component</code>插件进行插件管理<br>安装<code>babel-plugin-component</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-plugin-component</span><br></pre></td></tr></table></figure><p>安装<code>element-ui</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui</span><br></pre></td></tr></table></figure><p>在<code>babel.config.js</code>中添加配置<code>element-ui</code>插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugin: [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                libraryName: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">                styleLibraryName: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着就可以按需加载element-ui组件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这里我会把开发&lt;a href=&quot;https://gitee.com/uyc/vue-cloudmusic&quot;&gt;音乐播放器项目&lt;/a&gt;中遇到的知识点记下来，方便自己学习，同时是对自己的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="Vue" scheme="https://uyc.gitee.io/tags/Vue/"/>
    
    <category term="Element-UI" scheme="https://uyc.gitee.io/tags/Element-UI/"/>
    
    <category term="postcss-pxtorem" scheme="https://uyc.gitee.io/tags/postcss-pxtorem/"/>
    
  </entry>
  
</feed>
