<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小u</title>
  
  <subtitle>u影川的小屋</subtitle>
  <link href="https://uyc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://uyc.gitee.io/"/>
  <updated>2020-10-30T12:34:59.985Z</updated>
  <id>https://uyc.gitee.io/</id>
  
  <author>
    <name>u影川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloudmusic App（node项目）的上线部署</title>
    <link href="https://uyc.gitee.io/2020/10/30/tech-notes/levons/process/"/>
    <id>https://uyc.gitee.io/2020/10/30/tech-notes/levons/process/</id>
    <published>2020-10-30T03:49:00.000Z</published>
    <updated>2020-10-30T12:34:59.985Z</updated>
    
    <content type="html"><![CDATA[<p>这几天花时间把我的cloudmusic项目部署到阿里云服务器上，学习了好多相关知识以及linux的命令，记录一下<br>上线域名：levons.cn<br>后面我会将该音乐播放器项目放在子域名里，主域名做首页导航</p><a id="more"></a><h3 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h3><p>上线前需要准备的东西：</p><ol><li>完整可上线部署的项目：我的cloudmusic项目前后端分离，所以有两个需要<code>node app.js</code>命令启动的文件夹</li><li>域名：阿里云可购买</li><li>服务器：用学生优惠价在阿里云购买的轻量应用服务器，应用镜像选用nodeJS，基于Centos7，买的大陆内的服务器，所以需要备案</li></ol><h3 id="二-启用服务器搭建node环境"><a href="#二-启用服务器搭建node环境" class="headerlink" title="二. 启用服务器搭建node环境"></a>二. 启用服务器搭建node环境</h3><p>登录阿里云控制台，配置好远程登录密码，点击远程连接，进入服务器命令行界面<br><img height="300px" src="../../../../../../images/levons/centos7.png" /></p><p>随后切换root账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>进入/home/admin文件夹，也可以是别的文件夹，等会我会把项目文件放在这</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/admin</span><br></pre></td></tr></table></figure><p>接下来配置node环境，我是用nvm，如果嫌github慢可以fork到gitee下载或者还有别的方法，服务器应该是有编译node环境需要的东西的，所以可以直接下载node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载nvm</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/creationix/nvm.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line"><span class="built_in">source</span> nvm/nvm.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">nvm --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载node前最好换下镜像源，速度快很多</span></span><br><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载node，我是直接下最新版</span></span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前node</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm也换一下源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>我就是如此搭建node环境的，就是再次登录服务器在admin文件夹下又会使用不了这些命令了，可能是我对linux不够了解吧，现在每次重新远程连接服务器都要在<code>/home/admin</code>文件夹下执行一下<code>source nvm/nvm.sh</code>这些环境又回来了。<br>这个问题需要我去多了解一下Centos7系统再做解释</p><h3 id="三-上传代码"><a href="#三-上传代码" class="headerlink" title="三. 上传代码"></a>三. 上传代码</h3><p>使用win10命令行远程连接传送文件可以使用SSH（服务器需要开启SSH端口22），好像是安装git环境后就有，我是有的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令是远程连接服务器，效果和在阿里云控制台点击远程连接差不多，就是需要输入密码，不想每次都输入可以密钥登录</span></span><br><span class="line">ssh username@ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要将本地文件夹上传到服务器需要使用scp命令</span></span><br><span class="line"><span class="comment"># 先退出服务器环境</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 上传文件夹到服务器/home/admin</span></span><br><span class="line">scp -r /path/filename username@ip:/home/admin</span><br></pre></td></tr></table></figure><p>这里我便将我项目的前后端代码传入服务器/home/admin文件夹中了</p><h3 id="四-开启服务"><a href="#四-开启服务" class="headerlink" title="四. 开启服务"></a>四. 开启服务</h3><p>在服务器下切换到项目文件夹直接用<code>node app.js</code>便可开启服务，但为了服务不因命令行环境的关闭而销毁使用pm2管理node进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装pm2</span></span><br><span class="line">npm install -g pm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，--watch能监听文件变化，改变项目文件不用重启服务</span></span><br><span class="line">pm2 start app.js --watch -i max</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程状态</span></span><br><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p>如此项目前后端便开启了端口服务，要注意html端口开在80端口才能再dns解析后直接跳转到html页面，后端接口的服务端口需要在阿里云控制台防火墙添加规则允许外网对该端口的访问。要使访问域名跳转指定端口服务可以配置nginx反向代理服务。</p><p>做好这些后就可以在浏览器中输入ip访问到项目app</p><h3 id="五-域名解析"><a href="#五-域名解析" class="headerlink" title="五. 域名解析"></a>五. 域名解析</h3><p>使用阿里云的免费解析，在云解析DNS/域名解析页面添加域名<br><img height="300px" src="../../../../../../images/levons/dns.png" /></p><p>随后在解析设置里添加记录，记录类型选A，主机记录填@，解析线路默认，记录值填写服务器ip，TTL随意默认<br>之后等待一会在浏览器输入域名就能访问到项目app了（前提是域名备案过了）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天花时间把我的cloudmusic项目部署到阿里云服务器上，学习了好多相关知识以及linux的命令，记录一下&lt;br&gt;上线域名：levons.cn&lt;br&gt;后面我会将该音乐播放器项目放在子域名里，主域名做首页导航&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="node" scheme="https://uyc.gitee.io/tags/node/"/>
    
    <category term="Centos7" scheme="https://uyc.gitee.io/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>Promise源码实现</title>
    <link href="https://uyc.gitee.io/2020/10/18/tech-notes/JavaScript/js-promise/"/>
    <id>https://uyc.gitee.io/2020/10/18/tech-notes/JavaScript/js-promise/</id>
    <published>2020-10-18T10:17:00.000Z</published>
    <updated>2020-10-18T12:49:15.752Z</updated>
    
    <content type="html"><![CDATA[<p>Promise对象代表了未来将要发生的事情，用来传递异步操作的消息</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>   <span class="comment">// 进行中</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span>   <span class="comment">// 已成功</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>     <span class="comment">// 已失败</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="comment">// 初始化状态</span></span><br><span class="line">        <span class="built_in">this</span>.status = PENDING</span><br><span class="line">        <span class="comment">// 将成功、失败结果放在 this 上，便于then、catch访问</span></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">        <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">        <span class="comment">// 成功状态回调函数队列</span></span><br><span class="line">        <span class="built_in">this</span>.onFulfilledCallbacks = []</span><br><span class="line">        <span class="comment">// 失败状态回调函数队列</span></span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 只有进行中状态才能更改状态</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">                <span class="built_in">this</span>.value = value</span><br><span class="line">                <span class="comment">// 执行成功状态的回调函数队列</span></span><br><span class="line">                <span class="built_in">this</span>.onFulfilledCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(<span class="built_in">this</span>.value))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> reject = <span class="function"><span class="params">reson</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">                <span class="built_in">this</span>.reason = reason</span><br><span class="line">                <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(<span class="built_in">this</span>.reason))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 立即执行executor</span></span><br><span class="line">            executor(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        onFulfilled =</span><br><span class="line">            <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">            ? onFulfilled</span><br><span class="line">            : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">        onRejected =</span><br><span class="line">            <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">            ? onRejected</span><br><span class="line">            : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                    reason <span class="keyword">instanceof</span> <span class="built_in">Error</span></span><br><span class="line">                    ? reason.message</span><br><span class="line">                    : reason)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (self.status === PENDING) &#123;</span><br><span class="line">                self.onFulfilledCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">const</span> result = onFulfilled(self.value)</span><br><span class="line">                            result <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line">                                ? result.then(resolve, reject)</span><br><span class="line">                                : resolve(result)</span><br><span class="line">                        &#125;, <span class="number">0</span>)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                self.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">const</span> result = onRejected(self.reason)</span><br><span class="line">                            result <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line">                                ? result.then(resolve, reject)</span><br><span class="line">                                : reject(result)</span><br><span class="line">                        &#125;, <span class="number">0</span>)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === FULFILLED) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> result = onFulfilled(self.value)</span><br><span class="line">                        result <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line">                            ? result.then(resolve, reject)</span><br><span class="line">                            : resolve(result)</span><br><span class="line">                    &#125;, <span class="number">0</span>)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === REJECTED) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> result = onRejected(self.reason)</span><br><span class="line">                        result <span class="keyword">instanceof</span> <span class="built_in">Promise</span></span><br><span class="line">                            ? result.then(resolve, reject)</span><br><span class="line">                            : reject(result)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> reject(reason) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(reason)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Promise对象代表了未来将要发生的事情，用来传递异步操作的消息&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue数据双向绑定的原理及实现</title>
    <link href="https://uyc.gitee.io/2020/09/26/tech-notes/vue/vue-theory/"/>
    <id>https://uyc.gitee.io/2020/09/26/tech-notes/vue/vue-theory/</id>
    <published>2020-09-26T07:54:00.000Z</published>
    <updated>2020-09-26T14:50:23.797Z</updated>
    
    <content type="html"><![CDATA[<p>Vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。首先对数据进行监听，当监听的属性发生变化时则通过消息订阅器通知订阅者，并执行相应的更新函数更新视图。</p><a id="more"></a><img height="300px" src="../../../../../../images/vue-theory/mvvm.png" /><p><code>Observer</code>(Object.defineProperty中的set) 监听data的变化，当data有变化时通知消息订阅器<code>Dep</code>，消息订阅器中储存有所有参与的订阅者<code>Watcher</code>，他会执行订阅者预定义的更新函数。订阅者<code>Watcher</code>负责向消息订阅器中添加（订阅）对应的更新函数以更新视图。</p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>view =&gt; data<br>view更新data通过事件监听，如input标签监听input事件获取数据</p><p>data =&gt; view<br>通过数据劫持得知数据的改变，再通过发布者-订阅者模式触发当数据改变需要对应更新视图的函数</p><h2 id="简易版Vue"><a href="#简易版Vue" class="headerlink" title="简易版Vue"></a>简易版Vue</h2><p>要实现Vue数据的双向绑定，需要实现以下几点：</p><ol><li>监听器Observer用来劫持并监听所有属性，有变动就通知订阅者</li><li>订阅者Watcher可以收到属性的变化通知并执行相应的更新函数，从而更新视图</li><li>解析器Compile用来扫描和解析每个dom节点的相关指令，并初始化模板数据以及生成相应的订阅器</li></ol><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>核心就是<code>Object.defineProperty()</code>方法，在简易Vue的实现中，<code>Observer</code>数据监听器就是应用该方法实现对数据的监听，欲对所有属性进行监听，故通过递归遍历监听所有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Observer 是一个数据监听器</span></span><br><span class="line"><span class="comment"> * 核心方法是 Object.defineProperty</span></span><br><span class="line"><span class="comment"> * 其主要功能是将数据对象的所有属性进行监听（递归遍历子属性值）</span></span><br><span class="line"><span class="comment"> * 如果数据发生改变则通过消息订阅器 Dep 通知订阅者 watcher </span></span><br><span class="line"><span class="comment"> * 而后订阅者接收到相应属性的变化，执行对应的更新函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data</span><br><span class="line">    <span class="built_in">this</span>.walk(data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历对象属性进行监听</span></span><br><span class="line">  walk(data) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.defineReactive(data, key, data[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听</span></span><br><span class="line">  defineReactive(data, key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="comment">// 递归监听子对象</span></span><br><span class="line">    observe(value)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      get() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在生成订阅者watcher的过程中会读取一次数据</span></span><br><span class="line"><span class="comment">         * 届时便会将订阅者本身暂时寄存在Dep.target中</span></span><br><span class="line"><span class="comment">         * 在这一步将订阅者添加至消息订阅器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">          dep.addSub(Dep.target)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue === value) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 赋新的值</span></span><br><span class="line">        value = newValue</span><br><span class="line">        <span class="comment">// 对新值进行监听</span></span><br><span class="line">        observe(newValue)</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据改变，调用订阅器的 notify 方法</span></span><br><span class="line"><span class="comment">         * 通知所有接受订阅的订阅者</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成返回监听器并监听传入的对象属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要一个放置订阅者的消息订阅器Dep，在数据更新的时候执行对应订阅者的更新函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 消息订阅器Dep，订阅器Dep主要负责收集订阅者 watcher</span></span><br><span class="line"><span class="comment"> * 然后在属性变化时通知订阅者并执行对应订阅者的更新函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 包含接受订阅的订阅者</span></span><br><span class="line">        <span class="built_in">this</span>.subs = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加接受订阅的订阅者</span></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.push(sub)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知订阅者更新</span></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 订阅者执行更新</span></span><br><span class="line">            sub.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者的中转站</span></span><br><span class="line">Dep.target = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>其中target是作为将订阅者存储到消息订阅器过程的中转站，后面<code>Watcher</code>中会使用到他</p><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>在监听一个属性时会生成一个<code>Dep</code>消息订阅器，作用便是当监听到数据发生改变时通知订阅者<code>Watcher</code>执行更新视图的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(vm, exp, cb) &#123;</span><br><span class="line">        <span class="comment">// 属性更新后需要执行的变更方法</span></span><br><span class="line">        <span class="built_in">this</span>.cb = cb</span><br><span class="line">        <span class="comment">// 需要接受订阅的数据对象</span></span><br><span class="line">        <span class="built_in">this</span>.vm = vm</span><br><span class="line">        <span class="comment">// 需要接受订阅的数据对象属性名</span></span><br><span class="line">        <span class="built_in">this</span>.exp = exp</span><br><span class="line">        <span class="comment">// 将自身添加到订阅器 Dep，并保存监视的属性值</span></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="comment">// 执行变更方法</span></span><br><span class="line">        <span class="built_in">this</span>.run()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="comment">// 被监视的属性值更新值</span></span><br><span class="line">        <span class="keyword">const</span> newValue = <span class="built_in">this</span>.vm.data[<span class="built_in">this</span>.exp]</span><br><span class="line">        <span class="comment">// 被监视的属性值原值</span></span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="built_in">this</span>.value</span><br><span class="line">        <span class="keyword">if</span> (newValue !== oldValue) &#123;</span><br><span class="line">            <span class="comment">// 更新订阅者中保存的值</span></span><br><span class="line">            <span class="built_in">this</span>.value = newValue</span><br><span class="line">            <span class="comment">// 执行变更</span></span><br><span class="line">            <span class="built_in">this</span>.cb(newValue, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="comment">// 缓存订阅者自身</span></span><br><span class="line">        Dep.target = <span class="built_in">this</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 读取被监视的属性值，触发监听器 Observer 的 get 方法</span></span><br><span class="line"><span class="comment">         * 将订阅者添加到消息订阅器 Dep</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.vm.data[<span class="built_in">this</span>.exp]</span><br><span class="line">        <span class="comment">// 添加之后释放内存</span></span><br><span class="line">        Dep.target = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 返回被监视的属性值</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>接下来要实现一个解析器Compile来做解析和绑定工作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析器作用：</span></span><br><span class="line"><span class="comment"> *  1.解析模板指令，并替换模板数据，初始化视图</span></span><br><span class="line"><span class="comment"> *  2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">        <span class="built_in">this</span>.vm = vm</span><br><span class="line">        <span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">        <span class="built_in">this</span>.fragment = <span class="literal">null</span></span><br><span class="line">        <span class="built_in">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化解析器：解析dom模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.el) &#123;</span><br><span class="line">            <span class="built_in">this</span>.fragment = <span class="built_in">this</span>.nodeToFragment(<span class="built_in">this</span>.el)</span><br><span class="line">            <span class="built_in">this</span>.compileElement(<span class="built_in">this</span>.fragment)</span><br><span class="line">            <span class="built_in">this</span>.el.appendChild(<span class="built_in">this</span>.fragment)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Cannot find this element &#x27;<span class="subst">$&#123;el&#125;</span>&#x27;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为解析模板，首先需要获得dom元素</span></span><br><span class="line"><span class="comment">     * 然后对dom元素上含有指令的节点进行处理</span></span><br><span class="line"><span class="comment">     * 因为这个环节对dom操作比较频繁，所以可以使用fragment片段进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    nodeToFragment(el) &#123;</span><br><span class="line">        <span class="keyword">const</span> oFragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">        <span class="keyword">let</span> child = el.firstChild</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (child) &#123;</span><br><span class="line">            <span class="comment">// 将DOM元素移入fragment中</span></span><br><span class="line">            oFragment.appendChild(child)</span><br><span class="line">            child = el.firstChild</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oFragment</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析dom，寻找指令并解析指令</span></span><br><span class="line">    compileElement(el) &#123;</span><br><span class="line">        <span class="keyword">const</span> childNodes = el.childNodes</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历子节点匹配指令并解析</span></span><br><span class="line">        childNodes.forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;\s*(.*?)\s*\&#125;\&#125;/</span></span><br><span class="line">            <span class="keyword">const</span> text = node.textContent</span><br><span class="line">            <span class="keyword">const</span> nodeAttrs = node.attributes</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 匹配文本指令后执行解析指令</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isTextNode(node)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (reg.test(text)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.compileText(node, reg.exec(text)[<span class="number">1</span>])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历以匹配属性指令后执行解析指令</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isElementNode) &#123;</span><br><span class="line">                <span class="built_in">Array</span>.prototype.forEach.call(nodeAttrs, <span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> attrName = attr.name</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">                        <span class="comment">// 指令内容</span></span><br><span class="line">                        <span class="keyword">const</span> exp = attr.value</span><br><span class="line">                        <span class="comment">// 指令类型</span></span><br><span class="line">                        <span class="keyword">const</span> directive = attrName.substring(<span class="number">2</span>)</span><br><span class="line">                        <span class="comment">// v-on</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.isEventDirective(attrName)) &#123;</span><br><span class="line">                            <span class="built_in">this</span>.compileEvent(node, <span class="built_in">this</span>.vm, exp, directive)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// v-model</span></span><br><span class="line">                            <span class="built_in">this</span>.compileModel(node, <span class="built_in">this</span>.vm, exp, directive)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;            </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归遍历子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                <span class="built_in">this</span>.compileElement(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 `v-model` 指令</span></span><br><span class="line">    compileModel(node, vm, exp, dir) &#123;</span><br><span class="line">        <span class="comment">// v-model 后绑定的变量名</span></span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.vm[exp]</span><br><span class="line">        <span class="comment">// 更新视图</span></span><br><span class="line">        <span class="built_in">this</span>.updateModel(node, value)</span><br><span class="line">        <span class="comment">// 劫持更新后的新数据创建订阅者</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(<span class="built_in">this</span>.vm, exp, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateModel(node, value)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  双向绑定的另一向，view =&gt; data</span></span><br><span class="line"><span class="comment">         *  通过html的input事件从视图获取数据保存到js中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取视图中的数据</span></span><br><span class="line">            <span class="keyword">const</span> newValue = e.target.value</span><br><span class="line">            <span class="keyword">if</span> (value === newValue) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新数据</span></span><br><span class="line">            vm[exp] = newValue</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 `v-on` 指令</span></span><br><span class="line">    compileEvent(node, vm, exp, dir) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventType = dir.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> cb = vm.methods &amp;&amp; vm.methods[exp]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (eventType &amp;&amp; cb) &#123;</span><br><span class="line">            node.addEventListener(eventType, cb.bind(vm), <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 `&#123;&#123; key &#125;&#125;` 指令</span></span><br><span class="line">    compileText(node, exp) &#123;</span><br><span class="line">        <span class="comment">// 初始化的数值</span></span><br><span class="line">        <span class="keyword">const</span> initText = <span class="built_in">this</span>.vm[exp]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化视图</span></span><br><span class="line">        <span class="built_in">this</span>.updateText(node, initText)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成订阅者并绑定更新函数</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(<span class="built_in">this</span>.vm, exp, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateText(node, value)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新视图text函数</span></span><br><span class="line">    updateText(node, value) &#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value === <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新视图model函数</span></span><br><span class="line">    updateModel(node, newValue, oldValue) &#123;</span><br><span class="line">        node.value = <span class="keyword">typeof</span> newValue === <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : newValue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是 v- 指令</span></span><br><span class="line">    isDirective(attr) &#123;</span><br><span class="line">        <span class="keyword">return</span> attr.indexOf(<span class="string">&#x27;v-&#x27;</span>) === <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是 on: 指令</span></span><br><span class="line">    isEventDirective(attr) &#123;</span><br><span class="line">        <span class="keyword">return</span> attr.indexOf(<span class="string">&#x27;on:&#x27;</span>) === <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为文本节点</span></span><br><span class="line">    isTextNode(node) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.nodeType === <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为元素节点</span></span><br><span class="line">    isElementNode(node) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简易Vue对象"><a href="#简易Vue对象" class="headerlink" title="简易Vue对象"></a>简易Vue对象</h3><p>通过上面实现的几个类可以实现一个建议的Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易版Vue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="built_in">this</span>.el = options.el</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在组件中，data必须是一个函数</span></span><br><span class="line"><span class="comment">         * 组件以函数返回值的方式传入数据</span></span><br><span class="line"><span class="comment">         * 这样每复用一次组件，就会返回一份新的data</span></span><br><span class="line"><span class="comment">         * 让各个组件实例维护各自的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">this</span>.data = options.data()</span><br><span class="line">        <span class="built_in">this</span>.methods = options.methods</span><br><span class="line">        <span class="built_in">this</span>.mounted = options.mounted</span><br><span class="line">        <span class="built_in">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对数据使用代理模式</span></span><br><span class="line"><span class="comment">         * 将实例对属性的操作代理为对实例data的属性操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.proxyKeys(key)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监视数据</span></span><br><span class="line">        observe(<span class="built_in">this</span>.data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 解析模板并初始化</span></span><br><span class="line">        <span class="keyword">new</span> Compile(<span class="built_in">this</span>.el, <span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化的最后执行mounted函数</span></span><br><span class="line">        <span class="built_in">this</span>.mounted()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据代理模式</span></span><br><span class="line">    proxyKeys(key) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            get() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data[key]</span><br><span class="line">            &#125;,</span><br><span class="line">            set(newValue) &#123;</span><br><span class="line">                <span class="built_in">this</span>.data[key] = newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此简易的Vue便实现了，接下来通过一个实例来验证</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/Observe.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/Compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/Watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> oName = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#name&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vueInstance = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;cc&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">          clickMe() &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.title = <span class="string">&#x27;hi&#x27;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.title = <span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line">          &#125;, 1000)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行便可以可以看到标题标签模板数据被初始化，并成功的在一秒后改变，input标签也实现了和数据name的双向绑定，点击事件也可以成功触发<br><img height="280px" src="../../../../../../images/vue-theory/instance.png" /></p><p>想看源码，请右转 <a href="https://github.com/uyingchuan/demo/tree/master/vue-theory">github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。首先对数据进行监听，当监听的属性发生变化时则通过消息订阅器通知订阅者，并执行相应的更新函数更新视图。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="vue" scheme="https://uyc.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript程序设计</title>
    <link href="https://uyc.gitee.io/2020/09/15/tech-notes/JavaScript/js-design-mode/"/>
    <id>https://uyc.gitee.io/2020/09/15/tech-notes/JavaScript/js-design-mode/</id>
    <published>2020-09-15T05:06:00.000Z</published>
    <updated>2020-09-30T14:03:50.817Z</updated>
    
    <content type="html"><![CDATA[<p>程序设计是给出解决特定问题程序的过程，应当包括分析问题（明确需求）、设计（确定数据结构及算法）、编码（实现具体功能）、调试等不同阶段。<br>本文主要记录 JS 程序设计的设计原则、编程技巧与设计模式。</p><a id="more"></a><p>文章学自 <a href="https://www.cnblogs.com/imwtr/p/9451129.html">博客园博客</a> &amp; <a href="https://www.jianshu.com/p/c5fe9353ba8a">简书博客</a> &amp; <a href="http://www.alloyteam.com/2012/10/common-javascript-design-patterns/">AlloyTeam</a>，略长。</p><div style="height:50px;"></div><h3 id="一-设计原则"><a href="#一-设计原则" class="headerlink" title="一 设计原则"></a>一 设计原则</h3><h4 id="1-单一职责原则（SRP）"><a href="#1-单一职责原则（SRP）" class="headerlink" title="1 单一职责原则（SRP）"></a>1 单一职责原则（SRP）</h4><p>一个对象或方法只做一件事。如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就会非常大。<br>所以应该将对象或方法划分为较小的粒度。</p><h4 id="2-最少知识原则（LKP）"><a href="#2-最少知识原则（LKP）" class="headerlink" title="2 最少知识原则（LKP）"></a>2 最少知识原则（LKP）</h4><p>一个软件实体应当尽可能少的与其他实体发生交互作用，软件实体包括：对象、类、模块、系统、变量、函数等。</p><ul><li>尽可能少的减少对象之间的交互，如果两个对象之间没必要直接通信，可以引入一个第三者对象来承担两个对象间的通信；</li><li>当一个对象必须要引用另一个对象时，让对象只暴露必要的接口，让对象之间的联系限制在最小的范围内。</li></ul><h4 id="3-开放-封闭原则（OCP）"><a href="#3-开放-封闭原则（OCP）" class="headerlink" title="3 开放-封闭原则（OCP）"></a>3 开放-封闭原则（OCP）</h4><p>软件实体应该是可扩展的，但不可修改。当需要修改一个程序的功能或者给这个程序增加新的功能时，可以使用增加代码的方式，而不是修改代码的方式。</p><ul><li>利用多态性（把做什么和谁去做分离开来），找出程序中将要发生改变的地方，将这些变化封装起来；</li><li>在不可避免的情况下，尽量修改相对容易修改的地方。</li></ul><div style="height:50px;"></div><h3 id="二-编程技巧"><a href="#二-编程技巧" class="headerlink" title="二 编程技巧"></a>二 编程技巧</h3><h4 id="1-面向对象编程"><a href="#1-面向对象编程" class="headerlink" title="1 面向对象编程"></a>1 面向对象编程</h4><p>面向对象编程同面向接口编程，将关注点从对象的类型上转移到对象的行为上，针对对象的超类型的抽象方法编程。</p><h5 id="1-1-抽象类"><a href="#1-1-抽象类" class="headerlink" title="1.1 抽象类"></a>1.1 抽象类</h5><p>当泡茶和泡咖啡都有将原料倒入水中的操作时，我们可以将泡茶和泡咖啡向上转型为泡饮料（体现了对象的多态性）。</p><p>我们可以在泡饮料的类中写一个将原料倒入水中的抽象方法，同时让从泡饮料继承来的泡茶和泡咖啡的子类重写将原料倒入水中的方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Beverage &#123;</span><br><span class="line">    <span class="keyword">abstract</span> operation():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Tea <span class="keyword">extends</span> Beverage &#123;</span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;将茶包倒入水中&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Coffee <span class="keyword">extends</span> Beverage &#123;</span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;将咖啡倒入水中&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-接口"><a href="#1-2-接口" class="headerlink" title="1.2 接口"></a>1.2 接口</h5><p>接口（Interfaces）是一个很重要的概念，它是对行为的抽象。这里可以将泡饮料抽象为一个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts</span></span><br><span class="line"><span class="keyword">interface</span> Beverage &#123;</span><br><span class="line">  operation: <span class="built_in">Function</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Tea <span class="keyword">implements</span> Beverage &#123;</span><br><span class="line">  operation() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;将茶包倒入水中&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Coffee <span class="keyword">implements</span> Beverage &#123;</span><br><span class="line">  operation() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;将咖啡倒入水中&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-代码重构"><a href="#2-代码重构" class="headerlink" title="2 代码重构"></a>2 代码重构</h4><h5 id="2-1-提炼代码"><a href="#2-1-提炼代码" class="headerlink" title="2.1 提炼代码"></a>2.1 提炼代码</h5><p>如果函数中有一大堆代码可以被独立出来，最好将这段代码放入另一个独立的函数中。</p><p>例子：页面加载完成后既要创建一个圆形，又要打印一些页面的版权信息<br>做法：将创建圆形和打印版权信息分离开来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCircle()</span><br><span class="line">  log()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ctx.fillStyle = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    ctx.arc(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    ctx.fill()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;版权所属&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-合并重复或过长的条件判断语句"><a href="#2-2-合并重复或过长的条件判断语句" class="headerlink" title="2.2 合并重复或过长的条件判断语句"></a>2.2 合并重复或过长的条件判断语句</h5><p>如果一个条件判断语句在多处重复使用，便将代码封装在一个独立的函数中。</p><h5 id="2-3-合理循环"><a href="#2-3-合理循环" class="headerlink" title="2.3 合理循环"></a>2.3 合理循环</h5><p>如果有些语句是做些一些重复的事情，可以将这些工作放在数组中进行循环。</p><h5 id="2-4-用函数退出来代替嵌套条件分支"><a href="#2-4-用函数退出来代替嵌套条件分支" class="headerlink" title="2.4 用函数退出来代替嵌套条件分支"></a>2.4 用函数退出来代替嵌套条件分支</h5><p>当条件嵌套太多层时，可以将这些条件尽可能地抽离成一个层级的条件分支，在进入一些条件分支时，可以让函数立即退出。</p><h5 id="2-5-合理利用链式调用"><a href="#2-5-合理利用链式调用" class="headerlink" title="2.5 合理利用链式调用"></a>2.5 合理利用链式调用</h5><p>链式调用并不方便调试，所以尽量避免过分应用。</p><div style="height:50px;"></div><h3 id="三-设计模式"><a href="#三-设计模式" class="headerlink" title="三 设计模式"></a>三 设计模式</h3><p>在程序设计中有很多实用的设计模式，其中大部分语言的实现都是基于 “类”。<br>而在 JavaScript 中并没有类这种概念(ES6 中的类实际只是语法糖)，JS 中的函数属于一等对象，在 JS 中定义一个对象非常简单 (let obj = {})，而基于 JS 中的闭包与弱类型等特性，在实现一些设计模式的方式上与众不同。</p><h4 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h4><p>《JavaScript 设计模式与实践》一书中的解释</p><p style="border:1px solid #eee;text-indent:30px;">假设有一个空房间，我们要日复一日地往里 面放一些东西。最简单的办法当然是把这些东西 直接扔进去，但是时间久了，就会发现很难从这 个房子里找到自己想要的东西，要调整某几样东 西的位置也不容易。所以在房间里做一些柜子也 许是个更好的选择，虽然柜子会增加我们的成 本，但它可以在维护阶段为我们带来好处。使用 这些柜子存放东西的规则，或许就是一种模式 </p><p>学习设计模式，有助于写出可复用和可维护性高的程序<br>设计模式的原则是“找出程序中变化的地方，并将变化封装起来”，它的关键是意图，而不是结构。<br>不过要注意，使用不当的话可能会事倍功半</p><ul><li><a href="#singleton">单例模式</a></li><li><a href="#strategy">策略模式</a></li><li><a href="#proxy">代理模式</a></li><li><a href="#iterator">迭代器模式</a></li><li><a href="#release">发布-订阅模式</a></li><li><a href="#command">命令模式</a></li></ul><div id="singleton" style="height:30px;"></div><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1 单例模式"></a>1 单例模式</h4><p>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><p>核心：确保只有一个实例，并提供全局访问</p><p>实现：<br>假设要设置一个管理员，多次调用也仅设置一次，我们可以使用闭包缓存一个内部变量来实现这个单例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="built_in">this</span>.manager = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.manager)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SingletonSetManager = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> manager = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!manager) &#123;</span><br><span class="line">      manager = <span class="keyword">new</span> SetManger(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> manager</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">SingletonSetManager(<span class="string">&#x27;Bob&#x27;</span>).getName() <span class="comment">// Bob</span></span><br><span class="line">SingletonSetManager(<span class="string">&#x27;Tom&#x27;</span>).getName() <span class="comment">// Bob</span></span><br><span class="line">SingletonSetManager(<span class="string">&#x27;Jack&#x27;</span>).getName() <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p>这是比较简单的做法，不具有通用的能力，我们可以改写一下代码，使得具备通用性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取出通用的单例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSingleton</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单例</span></span><br><span class="line"><span class="keyword">const</span> managerSingleton = getSingleton(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> manager = <span class="keyword">new</span> SetManager(name)</span><br><span class="line">  <span class="keyword">return</span> manager</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">managerSingleton(<span class="string">&#x27;Tom&#x27;</span>).getName() <span class="comment">// Tom</span></span><br><span class="line">managerSingleton(<span class="string">&#x27;Jack&#x27;</span>).getName() <span class="comment">// Tom</span></span><br><span class="line">managerSingleton(<span class="string">&#x27;Bob&#x27;</span>).getName() <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><p>这时我们就可以使用<code>getSingleton</code>方法任意的获取某个类的单例。</p><div id="strategy" style="height:30px;"></div><h4 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2 策略模式"></a>2 策略模式</h4><p>定义：定义一系列的算法，把他们一个一个的封装起来，并且使他们可以互相替换。</p><p>核心：将算法的使用和算法的实现分离开来<br>一个基于策略模式的程序至少由两部分组成：<br>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程；<br>第二个部分是环境类 Context，Context 接受客户的请求，随后把请求委托给某一个策略类，要做到这一点，说明 Context 中要维持对某个策略类对象的引用</p><p>实现：<br>策略模式可以用于组合一系列算法，也可用于组合一系列业务规则<br>假设需要通过成绩等级来计算学生的最终得分，每个成绩等级有对应的加权值。我们可以利用对象字面量的形式来直接定义这个组策略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加权映射关系</span></span><br><span class="line"><span class="keyword">const</span> levelMap = &#123;</span><br><span class="line">  s: <span class="number">10</span>,</span><br><span class="line">  A: <span class="number">8</span>,</span><br><span class="line">  B: <span class="number">6</span>,</span><br><span class="line">  C: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组策略</span></span><br><span class="line"><span class="keyword">const</span> scoreLevel = &#123;</span><br><span class="line">  basicScore: <span class="number">80</span>,</span><br><span class="line"></span><br><span class="line">  S: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.basicScore + levelMap[<span class="string">&#x27;S&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  A: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.basicScore + levelMap[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  B: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.basicScore + levelMap[<span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  C: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.basicScore + levelMap[<span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScore</span>(<span class="params">level</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> scoreLevel[level] ? scoreLevel[level]() : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getScore(<span class="string">&#x27;S&#x27;</span>), getScore(<span class="string">&#x27;A&#x27;</span>), getScore(<span class="string">&#x27;B&#x27;</span>), getScore(<span class="string">&#x27;C&#x27;</span>), getScore(<span class="string">&#x27;D&#x27;</span>)) <span class="comment">// 90, 88, 86, 84, 0</span></span><br></pre></td></tr></table></figure><p>在组合业务规则方面，比较经典的是表单的验证方法。这里列出比较关键的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误提示</span></span><br><span class="line"><span class="keyword">const</span> errorMessages = &#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">&#x27;输入数据格式不正确&#x27;</span>,</span><br><span class="line">  minLength: <span class="string">&#x27;输入数据长度不够&#x27;</span>,</span><br><span class="line">  isNumber: <span class="string">&#x27;请输入数字&#x27;</span>,</span><br><span class="line">  required: <span class="string">&#x27;内容不能为空&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则集</span></span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMessage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMessage || errorMessages[<span class="string">&#x27;minLength&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isNumber: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMessage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/\d+/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMessage || errorMessages[<span class="string">&#x27;isNumber&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  required: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMessage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMessage || errorMessages[<span class="string">&#x27;required&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加校验规则</span></span><br><span class="line">  add(value, rule, errorMessage) &#123;</span><br><span class="line">    <span class="keyword">const</span> arg = [value]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rule.indexOf(<span class="string">&#x27;minLength&#x27;</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> temp = rule.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">      arg.push(temp[<span class="number">1</span>])</span><br><span class="line">      rule = temp[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arg.push(errorMessage)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.items.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 进行校验</span></span><br><span class="line">      <span class="keyword">return</span> rules[rule].apply(<span class="built_in">this</span>, arg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> ret = <span class="built_in">this</span>.items[i]()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testTel</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validate = <span class="keyword">new</span> Validator()</span><br><span class="line"></span><br><span class="line">validate.add(testTel(<span class="string">&#x27;abc&#x27;</span>), <span class="string">&#x27;isNumber&#x27;</span>, <span class="string">&#x27;只能是数字&#x27;</span>) <span class="comment">// 只能是数字</span></span><br><span class="line">validate.add(testTel(<span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;required&#x27;</span>) <span class="comment">// 内容不能为空</span></span><br><span class="line">validate.add(testTel(<span class="string">&#x27;123&#x27;</span>), <span class="string">&#x27;minLength: 5&#x27;</span>, <span class="string">&#x27;至少5位&#x27;</span>) <span class="comment">// 至少5位</span></span><br><span class="line">validate.add(testTel(<span class="string">&#x27;12345&#x27;</span>), <span class="string">&#x27;minLength: 5&#x27;</span>, <span class="string">&#x27;至少5位&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ret = validate.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br></pre></td></tr></table></figure><p>优缺点：<br>优点：可以有效的避免多重条件语句，将一系列方法封装起来也更直观，利于维护；<br>缺点：往往策略集会比较多，我么需要事先了解定义好的所有情况。</p><div id="proxy" style="height:30px;"></div><h4 id="3-代理模式"><a href="#3-代理模式" class="headerlink" title="3 代理模式"></a>3 代理模式</h4><p>定义：为一个对象提供一个代用品或占位符，以便控制对他的访问</p><p>核心：当客户不方便直接访问一个对象或者不满足要求时，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。<br>替身对象对请求做出一些处理后，再把请求转交给本体对象<br>代理和本体的接口具有一致性，本体定义了关键功能，而代理是提供或拒绝对它的访问，或者在访问本体之前做一些额外的事情</p><p>实现：<br>代理模式有三种：保护代理、虚拟代理、缓存代理</p><hr><p>保护代理主要实现了访问主体的限制行为，以过滤字符作为简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主体 发送信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理，对消息进行过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxySendMessage</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 无消息则返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> msg === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deny&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有消息则进行过滤</span></span><br><span class="line">  msg = (<span class="string">&#x27;&#x27;</span> + msg).replace(<span class="regexp">/s\s*b/gi</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  sendMessage(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;sad sbS B s b SB&#x27;</span></span><br><span class="line">sendMessage(str) <span class="comment">// sad sbS B s b SB</span></span><br><span class="line">proxySendMessage(str) <span class="comment">// sad</span></span><br><span class="line">proxySendMessage() <span class="comment">// deny</span></span><br></pre></td></tr></table></figure><p>他的意图很明显，在访问主体之前进行控制，没有消息的时候直接在代理中返回了，拒绝访问主体，这是数据保护代理的模式<br>有消息的时候对消息中的敏感字符进行了处理，这属于虚拟代理的模式</p><hr><p>虚拟代理在控制对主体的访问时，加入了一些额外的操作<br>在滚动事件触发的时候，也许不需要频繁触发，我们可以引入函数节流，这是一种虚拟代理的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数节流，对于执行频率的函数采取一段时间内只执行一次的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">handle, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="comment">// 当距离上次执行处理器 handle 的时间间隔超过了wait时，才可以再次执行处理器</span></span><br><span class="line">    <span class="keyword">if</span> (now - last &gt; wait) &#123;</span><br><span class="line">      handle(...rest)</span><br><span class="line">      last = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollHandle</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.type, ++count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">const</span> proxyScrollHandle = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> throttle(scrollHandle, <span class="number">500</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onscroll = proxyScrollHandle</span><br></pre></td></tr></table></figure><hr><p>缓存代理可以为一些开销大的运算结果提供暂时的缓存，提升效率<br>举个例子，缓存加法操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arg = [...rest]</span><br><span class="line">  <span class="keyword">return</span> arg.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">const</span> proxyAdd = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arg = [...rest].join(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果缓存过，则返回缓存中的结果</span></span><br><span class="line">    <span class="keyword">if</span> (cache[arg]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[arg]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> add(...rest)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">  add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">  proxyAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">  proxyAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div id="iterator" style="height:30px;"></div><h4 id="4-迭代器模式"><a href="#4-迭代器模式" class="headerlink" title="4 迭代器模式"></a>4 迭代器模式</h4><p>定义：迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示</p><p>核心：在使用迭代器模式后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素</p><p>实现：js 中数组的 map、forEach 已经内置了迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不过对于对象的遍历，往往不能与数组一样使用同样的方法遍历<br>我们可以封装一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; obj.length; ++i) &#123;</span><br><span class="line">      value = cb.call(obj[i], i, obj[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      value = cb.call(obj[i], i, obj[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">index, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">each(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">index, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 0 1</span></span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 2 3</span></span><br><span class="line"><span class="comment">// a 1</span></span><br><span class="line"><span class="comment">// b 2</span></span><br><span class="line"><span class="comment">// c 3</span></span><br></pre></td></tr></table></figure><div id="release" style="height:30px;"></div><h4 id="5-发布-订阅模式"><a href="#5-发布-订阅模式" class="headerlink" title="5 发布-订阅模式"></a>5 发布-订阅模式</h4><p>定义：也叫做观察者模式，定义了对象间的一种一对多的依赖关系，当一个状态发生改变时，所有依赖于他的对象都将得到通知</p><p>核心：取代对象之间硬编码的通知机制，一个对象不在显式的调用另一个对象的某个接口。<br>与传统的发布-订阅模式实现方式（将订阅者本身当成引用传入发布者）不同，在 js 中通常使用注册回调函数的形式来订阅。</p><p>实现：js 中的事件就是经典的发布-订阅模式的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click1&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;click2&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line"><span class="built_in">document</span>.body.click() <span class="comment">// click1, click2</span></span><br></pre></td></tr></table></figure><p>优缺点：<br>优点：一为时间上的解耦，二为对象之间的解耦。可以用在异步编程和 MVC 框架中<br>缺点：创建订阅者本身要消耗一定的时间和内存，订阅的处理函数不一定会被执行，驻留内存有性能开销。<br>弱化了对象之间的联系，复杂的情况下可能会导致程序难以跟踪维护和理解。</p><div id="command" style="height:30px;"></div><h4 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6 命令模式"></a>6 命令模式</h4><p>定义：用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系<br>命令（command）指的是一个执行某些特定事情的指令</p><p>核心：命令中带有 execute 执行、undo 撤销、redo 重做等相关命令方法，建议显式的指示这些方法名</p><p>实现：简单的命令模式实现可以直接使用对象字面量的形式定义一个命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> incrementCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过接下来的例子是一个自增命令，提供执行、撤销、重做功能  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementCommand</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 当前值</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 命令栈</span></span><br><span class="line">    <span class="built_in">this</span>.stack = []</span><br><span class="line">    <span class="comment">// 栈指针位置</span></span><br><span class="line">    <span class="built_in">this</span>.stackPosition = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行</span></span><br><span class="line">  execute() &#123;</span><br><span class="line">    <span class="built_in">this</span>._clearRedo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> command = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.value += <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行并缓存</span></span><br><span class="line">    command()</span><br><span class="line">    <span class="built_in">this</span>.stack.push(command)</span><br><span class="line">    <span class="built_in">this</span>.stackPosition++</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getValue()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否能撤消</span></span><br><span class="line">  canUndo() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackPosition &gt;= <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是否能恢复</span></span><br><span class="line">  canRedo() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stackPosition &lt; <span class="built_in">this</span>.stack.length - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.canUndo()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.stackPosition--</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> command = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.value -= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    command()</span><br><span class="line">    <span class="built_in">this</span>.getValue()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redo() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.canRedo()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行栈顶的命令</span></span><br><span class="line">    <span class="built_in">this</span>.stack[++<span class="built_in">this</span>.stackPosition]()</span><br><span class="line">    <span class="built_in">this</span>.getValue()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行时，已撤销的操作不能重做</span></span><br><span class="line">  _clearRedo() &#123;</span><br><span class="line">    <span class="built_in">this</span>.stack = <span class="built_in">this</span>.stack.slice(<span class="number">0</span>, <span class="built_in">this</span>.stackPosition + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getValue() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再实例化进行测试，模拟执行、撤销、重做的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> incrementCommand = <span class="keyword">new</span> IncrementCommand()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟事件触发，执行命令</span></span><br><span class="line"><span class="keyword">const</span> eventTrigger = &#123;</span><br><span class="line">  <span class="comment">// 某个事件的处理中，直接调出命令的处理方法</span></span><br><span class="line">  increment() &#123;</span><br><span class="line">    incrementCommand.execute()</span><br><span class="line">  &#125;,</span><br><span class="line">  incrementUndo() &#123;</span><br><span class="line">    incrementCommand.undo()</span><br><span class="line">  &#125;,</span><br><span class="line">  incrementRedo() &#123;</span><br><span class="line">    incrementCommand.redo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventTrigger.increment()  <span class="comment">// 2</span></span><br><span class="line">eventTrigger.increment()  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">eventTrigger.incrementUndo()  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">eventTrigger.increment()  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">eventTrigger.incrementUndo()  <span class="comment">// 2</span></span><br><span class="line">eventTrigger.incrementUndo()  <span class="comment">// 0</span></span><br><span class="line">eventTrigger.incrementUndo()  <span class="comment">// 无输出</span></span><br><span class="line"></span><br><span class="line">eventTrigger.incrementRedo()  <span class="comment">// 2</span></span><br><span class="line">eventTrigger.incrementRedo()  <span class="comment">// 4</span></span><br><span class="line">eventTrigger.incrementRedo()  <span class="comment">// 无输出</span></span><br><span class="line"></span><br><span class="line">eventTrigger.increment()  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><div id="command" style="height:30px;"></div><h4 id="7-组合模式"><a href="#7-组合模式" class="headerlink" title="7 组合模式"></a>7 组合模式</h4><p>定义：使用小的子对象来构建更大的对象，而这些小的子对象本身也许是由更小的‘孙对象’构成的</p><p>核心：可以用树形结构来表示这种‘部分-整体’的层次结构，调用组合对象的execute方法，程序会递归调用组合对象下子叶对象的execute方法</p><p>但要注意的是，组合模式不是父子关系，它是一种HAS-A（聚合）的关系，将请求委托给它所包含的所有叶对象。基于这种委托，就需要保证组合对象和叶对象拥有相同的接口<br>此外，也要保证一致的方式对待列表中的每个子叶对象，即叶对象属于同一类，不需要做额外的特殊操作</p><p>实现：<br>使用组合模式来实现扫描文件夹的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo...</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序设计是给出解决特定问题程序的过程，应当包括分析问题（明确需求）、设计（确定数据结构及算法）、编码（实现具体功能）、调试等不同阶段。&lt;br&gt;本文主要记录 JS 程序设计的设计原则、编程技巧与设计模式。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="Javascript" scheme="https://uyc.gitee.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue插槽</title>
    <link href="https://uyc.gitee.io/2020/09/14/tech-notes/vue/vue-slot/"/>
    <id>https://uyc.gitee.io/2020/09/14/tech-notes/vue/vue-slot/</id>
    <published>2020-09-14T08:25:00.000Z</published>
    <updated>2020-09-14T11:21:58.232Z</updated>
    
    <content type="html"><![CDATA[<p>插槽，可以简单理解为在当前组件留下一个位置为使用该组件时接收一些非固定的内容  </p><a id="more"></a><p>Vue2.6之后，插槽指令统一为<code>v-slot</code>， 缩写为<code>#</code>。<br>详见 <a href="https://cn.vuejs.org/v2/guide/components-slots.html">官方文档</a></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>当想在子组件的不同位置插入不同的内容时，需要给每个位置都定义一个插槽名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base-component组件</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;slot name=<span class="string">&quot;header&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;slot name=<span class="string">&quot;footer&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面组件定义了三个插槽，中间的插槽未定义插槽名，它会带有隐含的名字 <code>default</code>，可使用该名字或者省略，使用插槽指令的缩写形式不能省略插槽名。<br>想要向具名插槽提供内容，需要用一个 <code>template</code>元素上使用 <code>v-slot</code>指令提供名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-component&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;This is main. &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;p&gt;Footer&lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/base-component&gt;</span><br></pre></td></tr></table></figure><p>渲染出来的结果是三段内容分别插入 base-component组件的三处插槽位置。 </p><p>另外插槽内还可以定义默认内容，使用组件插槽时不插入内容就渲染默认内容，有新内容就覆盖插槽中默认的内容。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>有时插入插槽的内容需要访问子组件数据，就需要在插槽中绑定数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base-component组件</span></span><br><span class="line">&lt;span&gt;</span><br><span class="line">    &lt;slot name=<span class="string">&quot;userName&quot;</span> v-bind:user=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>绑定在插槽中的属性被称为<code>插槽 prop</code>，当在父组件中使用插槽时，用带值的<code>v-slot</code>定义<code>插槽 prop</code>的名字来获取子组件上的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-component&gt;</span><br><span class="line">    &lt;template v-slot:userName=<span class="string">&quot;scope&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; scope.user.firstName + scope.user.lastName &#125;&#125;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/base-component&gt;</span><br></pre></td></tr></table></figure><p>这个例子中将包含<code>插槽 prop</code>的对象名命名为<code>scope</code>，这个名字可以自定义.</p><p>另外插槽名字也是可以省略的，对与默认名插槽获取插槽作用域可以<code>v-slot=&quot;scopeName&quot;</code>获取<code>插槽 prop</code>对象。</p><h4 id="解构-插槽-prop"><a href="#解构-插槽-prop" class="headerlink" title="解构 插槽 prop"></a>解构 插槽 prop</h4><p>在支持的环境下可以使用es6的解构来传入<code>插槽 prop</code>。<code>v-slot=&#123; user &#125;</code>便可直接使用子组件作用域的<code>user</code>对象。</p><h4 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;base-component&gt;</span><br><span class="line">    &lt;template v-slot:[dynamicSlotName] &gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/base-component&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;插槽，可以简单理解为在当前组件留下一个位置为使用该组件时接收一些非固定的内容  &lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="vue" scheme="https://uyc.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue路由懒加载</title>
    <link href="https://uyc.gitee.io/2020/09/13/tech-notes/vue/vue-lazy-load/"/>
    <id>https://uyc.gitee.io/2020/09/13/tech-notes/vue/vue-lazy-load/</id>
    <published>2020-09-13T06:59:00.000Z</published>
    <updated>2020-09-14T11:21:47.499Z</updated>
    
    <content type="html"><![CDATA[<p>懒加载也叫延迟加载，即在需要使用指定代码块的时候才进行代码块的加载。  </p><a id="more"></a><p>详见 <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">官方文档</a></p><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>在打包构建应用时，JavaScript包会非常大，影响页面的加载。如果将不同的路由对应的组件分割成不同的代码块，在路由被访问的时候才进行对应代码块的加载，会大大提高首页的加载效率。</p><p>使用vue的异步组件结合webpack代码分割功能实现的懒加载可以轻松的实现路由懒加载</p><p>将异步组件定义成返回一个Promise的工厂函数（该函数返回的Promise应该resolve组件本身），然后使用webpack（&gt;webpack2）的动态import语法定义代码分块点，结合这两点就可以定义一个能被webpack自动代码分割的异步组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h4><p>如果需要把某个路由下的所有组件打包在同一个异步块（chunk）中，需要使用webpack（&gt;webpack2.4）的特殊注释语法来提供chunk name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-bar&quot; */</span> <span class="string">&#x27;./Bar.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Baz = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;group-baz&quot; */</span> <span class="string">&#x27;./Baz.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒加载也叫延迟加载，即在需要使用指定代码块的时候才进行代码块的加载。  &lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="vue" scheme="https://uyc.gitee.io/tags/vue/"/>
    
    <category term="webpack" scheme="https://uyc.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>继承与原型链</title>
    <link href="https://uyc.gitee.io/2020/09/06/tech-notes/JavaScript/js-prototype/"/>
    <id>https://uyc.gitee.io/2020/09/06/tech-notes/JavaScript/js-prototype/</id>
    <published>2020-09-06T12:06:00.000Z</published>
    <updated>2020-09-06T14:23:12.807Z</updated>
    
    <content type="html"><![CDATA[<p>原型链在js中是比较重要的一个知识点，js本身就是基于原型的，非常有必要理解js的原型链与继承相关知识。</p><a id="more"></a><h3 id="基于原型链的继承"><a href="#基于原型链的继承" class="headerlink" title="基于原型链的继承"></a>基于原型链的继承</h3><p>js对象都会有一个指向一个原型对象的链，在试图访问对象的属性时，不仅仅会在对象本身上寻找，还会在该对象的原型链上继续往上寻找，一直找到匹配的属性或者到达原型链的末端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.fi = <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.se = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.prototype.se = <span class="number">2.1</span></span><br><span class="line">a.prototype.th = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> a()</span><br><span class="line"><span class="comment">// b通过a构造生成，b的原型链便指向了构造函数a的原型对象</span></span><br><span class="line"><span class="comment">// 即 b.__proto__ === a.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.se)   <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.th)   <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"><span class="comment">// 在b中找寻不到便到b的原型链中寻找，即a.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.un)  <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 在实例对象b中寻找属性th，先在b自身中寻找</span></span><br><span class="line"><span class="comment">// 在b中找寻不到便到b的原型链中寻找，即a.prototype</span></span><br><span class="line"><span class="comment">// 在a.prototype中寻找不到便继续往原型链上找</span></span><br><span class="line"><span class="comment">// 而a.prototype.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">// 在Object.prototype中还找不到，继续</span></span><br><span class="line"><span class="comment">// 而Object.prototype.__proto__ === null</span></span><br><span class="line"><span class="comment">// 到这便是原型链的末尾，于是整个原型链如下：</span></span><br><span class="line"><span class="comment">// &#123; fi:1, se: 2 &#125; --&gt; &#123; se: 2.1, th: 3 &#125; --&gt; Object.prototype --&gt; null</span></span><br></pre></td></tr></table></figure><p>js便是这样通过原型链来实现继承的，如果在实例对象<code>obj</code>中找不到属性，便在obj.<strong>proto__中寻找，找不到继续在obj.__proto</strong>.__proto__里寻找，一直到原型链末端<code>null</code>便没有下一个__proto__了，没找到就返回<code>undefined</code></p><p>__proto__不是js标准里的，不用这个属性的好。在ECMAScript标准中是obj.[[Prototype]]，从ES6开始使用Object.getPrototypeOf()和Object.setPrototypeOf()来访问修改[[Prototype]]。</p><p>在遍历对象属性的时候如果不想遍历原型链，可以使用Object实例对象的<code>hasOwnProperty</code>方法，或者<code>Object.keys()</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原型链在js中是比较重要的一个知识点，js本身就是基于原型的，非常有必要理解js的原型链与继承相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>函数防抖与节流</title>
    <link href="https://uyc.gitee.io/2020/09/04/tech-notes/JavaScript/js-debounce/"/>
    <id>https://uyc.gitee.io/2020/09/04/tech-notes/JavaScript/js-debounce/</id>
    <published>2020-09-04T13:21:00.000Z</published>
    <updated>2020-09-17T07:53:04.556Z</updated>
    
    <content type="html"><![CDATA[<p>函数防抖和函数节流两者都是优化高频率js代码执行的一种手段</p><a id="more"></a><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p>在搜索框识别、用户名密码验证等场景下，可以使用函数防抖来减少计算，节省性能，使用户有更好的体验</p><p>代码如下，执行一次防抖函数<code>debounce</code>会定义一个定时器，在一定时间后执行传入的处理函数<code>handle</code>，如果再次执行函数防抖则会覆盖上次的定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">handle, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            handle()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>类似淘宝购物场景多次点击，或者通过页面视口变化改变根节点字体大小等场景，可以将多个访问缩减为一个访问，这时用节流函数可以提升用户体验</p><p>代码如下，主要为计算上一次执行处理函数<code>handle</code>与当前执行节流函数<code>throttle</code>的时间间隔，超过一个时间段才允许再次运行处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">handle, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">        <span class="keyword">if</span>(now - last &gt; wait) &#123;</span><br><span class="line">            handle()</span><br><span class="line">            last = now</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数防抖和函数节流两者都是优化高频率js代码执行的一种手段&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包及对象私有属性</title>
    <link href="https://uyc.gitee.io/2020/08/28/tech-notes/JavaScript/js-closure/"/>
    <id>https://uyc.gitee.io/2020/08/28/tech-notes/JavaScript/js-closure/</id>
    <published>2020-08-28T08:59:00.000Z</published>
    <updated>2020-08-31T03:22:09.837Z</updated>
    
    <content type="html"><![CDATA[<p>关于闭包及对象私有变量相关的问题中我的理解</p><a id="more"></a><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包是一种保护私有变量的机制，如果在函数中声明局部变量，该变量会随着函数的完成而销毁，闭包可以使函数内部的变量不被销毁<br>ES6之前js是没有块级作用域的，只有全局和函数作用域，闭包可以解决因没有块级作用域而出现的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里只说明他的保护私有变量的能力</span></span><br><span class="line"><span class="keyword">const</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">add()   <span class="comment">// count = 1</span></span><br><span class="line">add()   <span class="comment">// count = 2</span></span><br><span class="line">add()   <span class="comment">// count = 3</span></span><br></pre></td></tr></table></figure><p>在上面代码中<code>add</code>是一个返回一个匿名函数的立即执行函数，它返回的函数中包含有立即执行函数的私有变量<code>count</code>，这样就形成了一个闭包，<code>count</code>变量并不会因为函数的执行而销毁，反而一直存在内存中.<br>闭包能保护私有变量，但私有变量多了也会吃内存，日常代码中闭包还是很常见的，理解了就行。</p><h4 id="对象私有属性"><a href="#对象私有属性" class="headerlink" title="对象私有属性"></a>对象私有属性</h4><p>创建对象的私有属性是有必要的，可以使用闭包的形式生成私有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Private</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _weight = <span class="string">&#x27;private&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> _name=name</span><br><span class="line">    <span class="keyword">let</span> _age=age</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        getName: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Name: &#x27;</span> + _name)</span><br><span class="line">        &#125;,</span><br><span class="line">        getAge: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Age: &#x27;</span> + _age)</span><br><span class="line">        &#125;,</span><br><span class="line">        setAge: <span class="function">(<span class="params">nAge</span>) =&gt;</span> &#123;</span><br><span class="line">            _age = nAge</span><br><span class="line">        &#125;,</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.getName()</span><br><span class="line">            <span class="built_in">this</span>.getAge()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> private = <span class="keyword">new</span> Private(<span class="string">&#x27;Tony&#x27;</span>,<span class="number">30</span>)</span><br><span class="line">private.getAge()</span><br><span class="line"><span class="comment">// Age: 30</span></span><br><span class="line">private.setAge(<span class="number">18</span>)</span><br><span class="line">private.getAge()</span><br><span class="line"><span class="comment">// Age: 18</span></span><br><span class="line"><span class="built_in">console</span>.log(private._weight)    </span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">private.init()</span><br><span class="line"><span class="comment">// Name: Tony</span></span><br><span class="line"><span class="comment">// Age: 18</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，想要读写<code>Private</code>中的变量只能通过放出开的接口才可以，这样便形成了对象的私有属性<br><code>init</code>接口的<code>this</code>指向的便是执行时调用接口的实例对象<code>private</code>，该对象在此处只有构造函数放出来的公开接口，对象的私有属性便被实现出来了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于闭包及对象私有变量相关的问题中我的理解&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器项目知识点</title>
    <link href="https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note/"/>
    <id>https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note/</id>
    <published>2020-08-10T11:30:00.000Z</published>
    <updated>2020-09-14T11:02:48.748Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我会把开发<a href="https://github.com/uyingchuan/vue-cloudmusic">音乐播放器项目</a>中遇到的知识点记下来，方便自己学习，同时是对自己的记录。</p><a id="more"></a><ul><li><a href="#first">1.Vue批量注册组件</a></li><li><a href="#second">2.移动端适配方案Rem</a></li><li><a href="#third">3.Vue按需导入Element-UI组件</a></li><li><a href="#fourth">4.使用v-lazyload插件实现图片懒加载</a></li><li><a href="#fifth">5.实现网页全屏与退出</a></li></ul><h2 id="first" style="display:block"></h2><h2 id="1-Vue批量注册组件"><a href="#1-Vue批量注册组件" class="headerlink" title="1.Vue批量注册组件"></a>1.Vue批量注册组件</h2><p>学习一个新项目时遇到的一个知识点，复用率高的基础组件可以批量进行注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">install(Vue) &#123;</span><br><span class="line">    <span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">        <span class="string">&quot;@/components/base&quot;</span>, <span class="comment">// 引入组件的根目录</span></span><br><span class="line">        <span class="literal">true</span>, <span class="comment">//是否需要查找下级目录</span></span><br><span class="line">        /[a-z0<span class="number">-9</span>]+\.(jsx?|vue)$/i</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 批量注册基础组件</span></span><br><span class="line">    requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当前获取组件的配置数据</span></span><br><span class="line">        <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line">        <span class="comment">// 获取该组件的 default.name 属性</span></span><br><span class="line">        <span class="keyword">const</span> componentName = componentConfig.default.name</span><br><span class="line">        <span class="keyword">if</span> (componentName) &#123;</span><br><span class="line">            <span class="comment">// 注册组件</span></span><br><span class="line">            Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="second" style="display:block"></h2><h2 id="2-移动端适配方案Rem"><a href="#2-移动端适配方案Rem" class="headerlink" title="2.移动端适配方案Rem"></a>2.移动端适配方案Rem</h2><p>使用<code>rem</code>进行移动端适配是现在主流的适配方案，需要将设计师的<code>px</code>稿件转换成<code>rem</code>，然后用<code>js</code>实现根字体随屏幕尺寸变换，从而达到移动端适配的效果。我这次项目学习了使用<code>postcss-pxtorem</code>插件进行<code>rem</code>自动计算。</p><h3 id="postcss-pxtorem插件的使用"><a href="#postcss-pxtorem插件的使用" class="headerlink" title="postcss-pxtorem插件的使用"></a>postcss-pxtorem插件的使用</h3><p>先在开发环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-pxtorem</span><br></pre></td></tr></table></figure><p>接着在<code>package.json</code>文件中配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;postcss&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;autoprefixer&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;rootValue&quot;</span>: <span class="number">14</span>,    <span class="comment">//设计稿根字体尺寸</span></span><br><span class="line">        <span class="string">&quot;propList&quot;</span>: [       <span class="comment">//需要转换的元素列表</span></span><br><span class="line">          <span class="string">&quot;*&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在已经可以将<code>px</code>转换成<code>rem</code>了，接下来要根据设备屏幕尺寸变换根字体尺寸，需要在vue程序入口加载一个<code>rem.js</code>文件,我这里还使用了<code>lodash-es</code>插件实现<code>函数节流(throttle)</code>,先安装插件再使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash-es</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rem.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">14</span></span><br><span class="line"><span class="keyword">let</span> htmlFontSize</span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> calc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里限制根字体在14~18之间，太小太大不好看</span></span><br><span class="line">        <span class="keyword">const</span> maxFontSize = <span class="number">18</span></span><br><span class="line">        <span class="keyword">const</span> minFontSize = <span class="number">14</span></span><br><span class="line">        <span class="keyword">const</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> width = html.clientWidth</span><br><span class="line">        <span class="comment">// 1440为设计搞尺寸，这里计算变换后的根字体尺寸</span></span><br><span class="line">        <span class="keyword">let</span> size = baseSize * (width / <span class="number">1440</span>)</span><br><span class="line">        size = <span class="built_in">Math</span>.min(maxFontSize, size)</span><br><span class="line">        size = <span class="built_in">Math</span>.max(minFontSize, size)</span><br><span class="line">        html.style.fontSize = size + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    calc()</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, throttle(calc(), <span class="number">500</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="third" style="display:block"></h2><h2 id="3-Vue按需导入Element-UI组件"><a href="#3-Vue按需导入Element-UI组件" class="headerlink" title="3.Vue按需导入Element-UI组件"></a>3.Vue按需导入Element-UI组件</h2><p>使用<code>babel-plugin-component</code>插件进行插件管理<br>安装<code>babel-plugin-component</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-plugin-component</span><br></pre></td></tr></table></figure><p>安装<code>element-ui</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui</span><br></pre></td></tr></table></figure><p>在<code>babel.config.js</code>中添加配置<code>element-ui</code>插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugin: [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                libraryName: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">                styleLibraryName: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着就可以按需加载element-ui组件</p><h2 id="fourth" style="display:block"></h2><h2 id="4-使用v-lazyload插件实现图片懒加载"><a href="#4-使用v-lazyload插件实现图片懒加载" class="headerlink" title="4.使用v-lazyload插件实现图片懒加载"></a>4.使用v-lazyload插件实现图片懒加载</h2><p>图片懒加载在项目开发里比较常用，使用<code>vue-lazyload</code>先在生产环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-lazyload</span><br></pre></td></tr></table></figure><p>使用很简单，在img标签中添加v-lazy属性写上图片地址即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fifth" style="display:block"></h2><h2 id="5-实现网页全屏与退出"><a href="#5-实现网页全屏与退出" class="headerlink" title="5.实现网页全屏与退出"></a>5.实现网页全屏与退出</h2><p><code>document</code>自带<code>requestFullscreen</code>方法可以全屏模式，退出使用自带的<code>exitFullscreen</code>方法，判断是否全屏模式有<code>fullScreen</code>方法，为了兼容可以使用以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestFullscreen</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.requestFullscreen) &#123;</span><br><span class="line">        ele.requestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.msRequestFullscreen) &#123;</span><br><span class="line">        ele.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.mozRequestFullScreen) &#123;</span><br><span class="line">        ele.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.webkitRequestFullScreen) &#123;</span><br><span class="line">        ele.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pDoc = <span class="built_in">window</span>.parent.document</span><br><span class="line">    <span class="keyword">if</span> (pDoc.exitFullscreen) &#123;</span><br><span class="line">        pDoc.exitFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.msExitFullscreen) &#123;</span><br><span class="line">        pDoc.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.mozCancelFullScreen) &#123;</span><br><span class="line">        pDoc.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.webkitCancelFullScreen) &#123;</span><br><span class="line">        pDoc.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否全屏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFullScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.fullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.mozFullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.webkitIsFullScreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这里我会把开发&lt;a href=&quot;https://github.com/uyingchuan/vue-cloudmusic&quot;&gt;音乐播放器项目&lt;/a&gt;中遇到的知识点记下来，方便自己学习，同时是对自己的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
    <category term="vue" scheme="https://uyc.gitee.io/tags/vue/"/>
    
    <category term="Element-UI" scheme="https://uyc.gitee.io/tags/Element-UI/"/>
    
    <category term="webpack" scheme="https://uyc.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>建博</title>
    <link href="https://uyc.gitee.io/2020/08/06/personal-notes/about-this-blog/"/>
    <id>https://uyc.gitee.io/2020/08/06/personal-notes/about-this-blog/</id>
    <published>2020-08-06T12:59:00.000Z</published>
    <updated>2020-09-14T10:53:00.413Z</updated>
    
    <content type="html"><![CDATA[<p>学习之余建个博客记录自己。</p><p>愿我们的付出都能变成美好的未来！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习之余建个博客记录自己。&lt;/p&gt;
&lt;p&gt;愿我们的付出都能变成美好的未来！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="personal-notes" scheme="https://uyc.gitee.io/categories/personal-notes/"/>
    
    
  </entry>
  
</feed>
