<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小u</title>
  
  <subtitle>u影川的小屋</subtitle>
  <link href="https://uyc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://uyc.gitee.io/"/>
  <updated>2020-08-23T06:39:51.424Z</updated>
  <id>https://uyc.gitee.io/</id>
  
  <author>
    <name>u影川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript知识点小记(未完)</title>
    <link href="https://uyc.gitee.io/2020/08/22/tech-notes/JavaScript/js-notes/"/>
    <id>https://uyc.gitee.io/2020/08/22/tech-notes/JavaScript/js-notes/</id>
    <published>2020-08-22T12:23:00.000Z</published>
    <updated>2020-08-23T06:39:51.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>JavaScript语言共6种数据类型（<code>ES6</code>新增<code>Symbol</code>类型，现提出第八种<code>BigInt</code>）</p><ul><li>Number    (数值)</li><li>String    (字符串)</li><li>Boolean    (布尔值)</li><li>Undefined   (未定义)</li><li>Null    (空值)</li><li>Object    (对象，包括数组、函数)</li></ul><h3 id="2-typeof运算符"><a href="#2-typeof运算符" class="headerlink" title="2.typeof运算符"></a>2.typeof运算符</h3><p>可以确定一个值的类型，同样的方法有<code>instanceof</code>运算符、<code>Object.prototype.toString</code>方法.</p><h3 id="3-数值相关全局方法"><a href="#3-数值相关全局方法" class="headerlink" title="3.数值相关全局方法"></a>3.数值相关全局方法</h3><ul><li>parseInt() 用于将字符串转换成数字</li><li>parseFloat() 将字符串转换成浮点数</li><li>isNaN() 判断值是否为NaN</li><li>isFinite() 表示某个值是否为正常的数值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js数据类型&quot;&gt;&lt;a href=&quot;#js数据类型&quot; class=&quot;headerlink&quot; title=&quot;js数据类型&quot;&gt;&lt;/a&gt;js数据类型&lt;/h2&gt;&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器项目知识点(1)</title>
    <link href="https://uyc.gitee.io/2020/08/21/tech-notes/cloudmusic/cloudmusic-note1/"/>
    <id>https://uyc.gitee.io/2020/08/21/tech-notes/cloudmusic/cloudmusic-note1/</id>
    <published>2020-08-21T08:55:00.000Z</published>
    <updated>2020-08-22T12:22:12.991Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/uyc/vue-cloudmusic">音乐播放器项目</a>知识点（1）</p><a id="more"></a><ul><li><a href="#first">0.vue-lazyload图片懒加载</a></li><li><a href="#second">1.网页的全屏</a></li></ul><h2 id="first" style="display:block"></h2><h2 id="1-使用v-lazyload插件实现图片懒加载"><a href="#1-使用v-lazyload插件实现图片懒加载" class="headerlink" title="1.使用v-lazyload插件实现图片懒加载"></a>1.使用v-lazyload插件实现图片懒加载</h2><p>图片懒加载在项目开发里比较常用，使用<code>vue-lazyload</code>先在生产环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-lazyload</span><br></pre></td></tr></table></figure><p>使用很简单，在img标签中添加v-lazy属性写上图片地址即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-lazy</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="second" style="display:block"></h2><h2 id="2-实现网页全屏与退出"><a href="#2-实现网页全屏与退出" class="headerlink" title="2.实现网页全屏与退出"></a>2.实现网页全屏与退出</h2><p><code>document</code>自带<code>requestFullscreen</code>方法可以全屏模式，退出使用自带的<code>exitFullscreen</code>方法，判断是否全屏模式有<code>fullScreen</code>方法，为了兼容可以使用以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestFullscreen</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.requestFullscreen) &#123;</span><br><span class="line">        ele.requestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.msRequestFullscreen) &#123;</span><br><span class="line">        ele.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.mozRequestFullScreen) &#123;</span><br><span class="line">        ele.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.webkitRequestFullScreen) &#123;</span><br><span class="line">        ele.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出全屏模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pDoc = <span class="built_in">window</span>.parent.document</span><br><span class="line">    <span class="keyword">if</span> (pDoc.exitFullscreen) &#123;</span><br><span class="line">        pDoc.exitFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.msExitFullscreen) &#123;</span><br><span class="line">        pDoc.msRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.mozCancelFullScreen) &#123;</span><br><span class="line">        pDoc.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pDoc.webkitCancelFullScreen) &#123;</span><br><span class="line">        pDoc.webkitRequestFullScreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否全屏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFullScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.fullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.mozFullScreen ||</span><br><span class="line">        <span class="built_in">document</span>.webkitIsFullScreen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gitee.com/uyc/vue-cloudmusic&quot;&gt;音乐播放器项目&lt;/a&gt;知识点（1）&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="JavaScript" scheme="https://uyc.gitee.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://uyc.gitee.io/tags/Vue/"/>
    
    <category term="vue-lazyload" scheme="https://uyc.gitee.io/tags/vue-lazyload/"/>
    
  </entry>
  
  <entry>
    <title>来自风平浪静的明天</title>
    <link href="https://uyc.gitee.io/2020/08/20/personal-notes/from-a-calm-tomorrow/"/>
    <id>https://uyc.gitee.io/2020/08/20/personal-notes/from-a-calm-tomorrow/</id>
    <published>2020-08-20T07:43:00.000Z</published>
    <updated>2020-08-21T13:53:12.326Z</updated>
    
    <content type="html"><![CDATA[<p>昨天一天把来自风平浪静的明天这部番刷完了，刷完之后就一直难受，莫名的难受。</p><a id="more"></a><p>以前看完一部番也会有一些触动，他们的故事到这就完结了，就挺怀念的。</p><p>但昨天的难受不一样。</p><p>看到他们的happy-end，有遗憾，有解脱，有幸福，为他们开心。</p><p>他们的情感纠葛很真实，很单纯，很容易从他们故事里看到自己的经历。</p><img src="../../../../../images/from-a-calm-tomorrow/千咲.jpg" style="width:100%;"><p>最心疼里面的千咲了，因为罪恶感一直将自己的感情束缚着，还好有个高智商的纺喜欢上了她，能够把她拉回来。</p><p>还有喜欢着她的要，为了不让她一直难受着，一直在努力的推动着光和爱花的感情，即使这会使得千咲讨厌他。审视自己，又有几分像呢？</p><p>虽然结局美海很遗憾，不过看起来她似乎已经解脱了，将自己对光的爱转为对光和爱华的祝福。结局淳还喜欢着她，他们应该会在一起吧，希望她能幸福。</p><img src="../../../../../images/from-a-calm-tomorrow/from-tomorrow.jpeg" style="width:100%;"><p>他们的故事就这样结束了，挺多感悟的，我的生活还在继续，我还有很多人要相遇，还有很多事要经历，祝福自己。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天一天把来自风平浪静的明天这部番刷完了，刷完之后就一直难受，莫名的难受。&lt;/p&gt;</summary>
    
    
    
    <category term="personal-notes" scheme="https://uyc.gitee.io/categories/personal-notes/"/>
    
    
    <category term="anime" scheme="https://uyc.gitee.io/tags/anime/"/>
    
    <category term="life" scheme="https://uyc.gitee.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器项目知识点(0)</title>
    <link href="https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note0/"/>
    <id>https://uyc.gitee.io/2020/08/10/tech-notes/cloudmusic/cloudmusic-note0/</id>
    <published>2020-08-10T11:30:00.000Z</published>
    <updated>2020-08-22T12:22:10.210Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我会把开发<a href="https://gitee.com/uyc/vue-cloudmusic">音乐播放器项目</a>中遇到的知识点记下来，方便自己学习，同时是对自己的记录。</p><a id="more"></a><ul><li><a href="#first">0.Vue批量注册组件</a></li><li><a href="#second">1.移动端适配方案Rem</a></li><li><a href="#third">2.Vue按需导入Element-UI组件</a></li></ul><h2 id="first" style="display:block"></h2><h2 id="1-Vue批量注册组件"><a href="#1-Vue批量注册组件" class="headerlink" title="1.Vue批量注册组件"></a>1.Vue批量注册组件</h2><p>学习一个新项目时遇到的一个知识点，复用率高的基础组件可以批量进行注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">install(Vue) &#123;</span><br><span class="line">    <span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">        <span class="string">&quot;@/components/base&quot;</span>, <span class="comment">// 引入组件的根目录</span></span><br><span class="line">        <span class="literal">true</span>, <span class="comment">//是否需要查找下级目录</span></span><br><span class="line">        /[a-z0<span class="number">-9</span>]+\.(jsx?|vue)$/i</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 批量注册基础组件</span></span><br><span class="line">    requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当前获取组件的配置数据</span></span><br><span class="line">        <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line">        <span class="comment">// 获取该组件的 default.name 属性</span></span><br><span class="line">        <span class="keyword">const</span> componentName = componentConfig.default.name</span><br><span class="line">        <span class="keyword">if</span> (componentName) &#123;</span><br><span class="line">            <span class="comment">// 注册组件</span></span><br><span class="line">            Vue.component(componentName, componentConfig.default || componentConfig)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="second" style="display:block"></h2><h2 id="2-移动端适配方案Rem"><a href="#2-移动端适配方案Rem" class="headerlink" title="2.移动端适配方案Rem"></a>2.移动端适配方案Rem</h2><p>使用<code>rem</code>进行移动端适配是现在主流的适配方案，需要将设计师的<code>px</code>稿件转换成<code>rem</code>，然后用<code>js</code>实现根字体随屏幕尺寸变换，从而达到移动端适配的效果。我这次项目学习了使用<code>postcss-pxtorem</code>插件进行<code>rem</code>自动计算。</p><h3 id="postcss-pxtorem插件的使用"><a href="#postcss-pxtorem插件的使用" class="headerlink" title="postcss-pxtorem插件的使用"></a>postcss-pxtorem插件的使用</h3><p>先在开发环境安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-pxtorem</span><br></pre></td></tr></table></figure><p>接着在<code>package.json</code>文件中配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;postcss&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;autoprefixer&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;rootValue&quot;</span>: <span class="number">14</span>,    <span class="comment">//设计稿根字体尺寸</span></span><br><span class="line">        <span class="string">&quot;propList&quot;</span>: [       <span class="comment">//需要转换的元素列表</span></span><br><span class="line">          <span class="string">&quot;*&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在已经可以将<code>px</code>转换成<code>rem</code>了，接下来要根据设备屏幕尺寸变换根字体尺寸，需要在vue程序入口加载一个<code>rem.js</code>文件,我这里还使用了<code>lodash-es</code>插件实现<code>函数节流(throttle)</code>,先安装插件再使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash-es</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rem.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">14</span></span><br><span class="line"><span class="keyword">let</span> htmlFontSize</span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> calc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里限制根字体在14~18之间，太小太大不好看</span></span><br><span class="line">        <span class="keyword">const</span> maxFontSize = <span class="number">18</span></span><br><span class="line">        <span class="keyword">const</span> minFontSize = <span class="number">14</span></span><br><span class="line">        <span class="keyword">const</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> width = html.clientWidth</span><br><span class="line">        <span class="comment">// 1440为设计搞尺寸，这里计算变换后的根字体尺寸</span></span><br><span class="line">        <span class="keyword">let</span> size = baseSize * (width / <span class="number">1440</span>)</span><br><span class="line">        size = <span class="built_in">Math</span>.min(maxFontSize, size)</span><br><span class="line">        size = <span class="built_in">Math</span>.max(minFontSize, size)</span><br><span class="line">        html.style.fontSize = size + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    calc()</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, throttle(calc(), <span class="number">500</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="third" style="display:block"></h2><h2 id="3-Vue按需导入Element-UI组件"><a href="#3-Vue按需导入Element-UI组件" class="headerlink" title="3.Vue按需导入Element-UI组件"></a>3.Vue按需导入Element-UI组件</h2><p>使用<code>babel-plugin-component</code>插件进行插件管理<br>安装<code>babel-plugin-component</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-plugin-component</span><br></pre></td></tr></table></figure><p>安装<code>element-ui</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui</span><br></pre></td></tr></table></figure><p>在<code>babel.config.js</code>中添加配置<code>element-ui</code>插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugin: [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                libraryName: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">                styleLibraryName: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着就可以按需加载element-ui组件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在这里我会把开发&lt;a href=&quot;https://gitee.com/uyc/vue-cloudmusic&quot;&gt;音乐播放器项目&lt;/a&gt;中遇到的知识点记下来，方便自己学习，同时是对自己的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="tech-notes" scheme="https://uyc.gitee.io/categories/tech-notes/"/>
    
    
    <category term="Vue" scheme="https://uyc.gitee.io/tags/Vue/"/>
    
    <category term="Element-UI" scheme="https://uyc.gitee.io/tags/Element-UI/"/>
    
    <category term="postcss-pxtorem" scheme="https://uyc.gitee.io/tags/postcss-pxtorem/"/>
    
  </entry>
  
</feed>
